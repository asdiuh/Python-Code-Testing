rstudioapi::getActiveDocumentContext()
rstudioapi::getActiveDocumentContext()
getwd()
1 + 1
1:100
# Chapter 3
library(ISLR)
lm(ISLR::Auto,y = Auto$horsepower, x = Auto$mpg)
lm(ISLR::Auto,horsepower~mpg)
lm(ISLR::Auto,Auto$horsepower~Auto$mpg)
lm(formula = Auto$horsepower~Auto$mpg)
Auto[,c("mpg", "horsepower")]
lm(formula = horsepower~mpg, data = Auto)
lm(formula = Auto$horsepower~Auto$mpg)
lm(formula = horsepower~mpg, data = Auto)
ModelFormula1 = lm(formula = Auto$horsepower~Auto$mpg)
ModelFormula2 = lm(formula = horsepower~mpg, data = Auto)
summary(ModelFormula1)
# Chapter 3
library(ISLR)
ModelFormula1 = lm(formula = Auto$horsepower~Auto$mpg)
ModelFormula2 = lm(formula = horsepower~mpg, data = Auto)
summary(ModelFormula1)
Auto[,c("mpg", "horsepower")]
# 3.6.2 simple linear regression
lmfit = lm(formula = medv ~ lstat, data = Boston)
library(MASS)
lmfit = lm(formula = medv ~ lstat, data = Boston)
lmfit
predict(lmfit, interval = "confidence"
)
plot(lstat, medv
)
attach(Boston)
plot(lstat, medv)
abline(lmfit)
plot(lstat, log(medv, exp(1))
)
lmfit2 = lm(formula = medv ~ log(lstat, exp(1)))
lmfit2
plot(lstat, log(medv, exp(1)))
abline(lmfit)
abline(lmfit2)
abline(lmfit)
abline(lmfit2)
plot(lstat, log(medv, exp(1)))
abline(lmfit)
abline(lmfit2)
plot(lstat, medv)
plot(lstat, log(medv, exp(1)))
abline(lmfit2)
plot(lstat, log(medv, exp(1)))
abline(lmfit2)
plot(log(lstat,exp(1)))
plot(log(lstat,exp(1)), medv)
lmfit2 = lm(formula = log(medv, exp(1)) ~ lstat)
abline(lmfit2)
plot(lstat, medv)
lmfit = lm(formula = medv ~ lstat, data = Boston)
plot(lstat, medv)
abline(lmfit)
plot(1/lstat, medv)
lmfit2 = lm(formula = medv ~ 1/lstat)
abline(lmfit2)
lmfit2
lmfit2 = lm(formula = medv ~ (1/lstat))
lmfit2
1/lstat
a = 1/lstat
a
lmfit2 = lm(formula = medv ~ a)
lmfit2
abline(lmfit2)
plot(lstat ,medv ,pch =20)
plot(lmfit)
plot(lmfit)
lmfit = lm(formula = medv ~ lstat, data = Boston)
lmfit
plot(lmfit)
qnorm(seq(0.01,0.99,0.01))
length(medv)
1:99
seq(1,506)
seq(1,506)/506
qnorm(seq(1,506)/506)
qnorm(seq(1,505)/506)
qnorm(seq(0.01,0.99,0.01))
quantile(rnorm(200),probs = seq(0.01,0.99,0.01))
rnorm(200)
trees$Height
quantile(trees$Height)
quantile(trees$Height, probs = seq(0.01,0.99,0.01))
# Chapter 3
library(ISLR)
library(MASS)
# 3.6.2 simple linear regression
attach(Boston)
lmfit = lm(formula = medv ~ lstat, data = Boston)
a = 1/lstat
lmfit2 = lm(formula = medv ~ a)
predict(lmfit, interval = "confidence")
predict(lmfit, interval = "confidence", level = .99)
plot(lstat, medv)
plot(1/lstat, medv)
plot(1/lstat, medv)
abline(lmfit)
abline(lmfit2)
plot(lmfit)
plot(hatvalues(lmfit))
lmfit = lm(formula = medv~lstat+age, data = Boston)
abline(lmfit)
plot(age, medv)
abline(lmfit)
x = 1000
b0 = -10.6513
b1 = 0.0055
reg <- function(x,b0,b1) {
y = b0 + b1*x
}
reg(x,b0,b1)
x = 1000
b0 = -10.6513
b1 = 0.0055
reg <- function(x,b0,b1) {
y = b0 + b1*x
return(y)
}
reg(x,b0,b1)
y
x = 1000
b0 = -10.6513
b1 = 0.0055
reg <- function(x,b0,b1) {
y = b0 + b1*x
a = return(y)
}
reg(x,b0,b1)
y
a
reg(x,b0,b1)
x = 1000
b0 = -10.6513
b1 = 0.0055
reg <- function(x,b0,b1) {
y = b0 + b1*x
return(y)
}
reg(x,b0,b1)
y
x = 1000
b0 = -10.6513
b1 = 0.0055
reg <- function(x,b0,b1) {
y = b0 + b1*x
a = return(y)
}
x = 1000
b0 = -10.6513
b1 = 0.0055
reg <- function(x,b0,b1) {
y = b0 + b1*x
a = return(y)
a
}
reg(x,b0,b1)
x = 1000
b0 = -10.6513
b1 = 0.0055
reg <- function(x,b0,b1) {
y = b0 + b1*x
y
log(y/(1-y),base = exp(1))
}
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = log(y/(1-y),base = exp(1))
a = return(c(y,pd))
a
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = log(y/(1-y),base = exp(1))
pd
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
# pd = log(y/(1-y),base = exp(1))
# pd
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
# pd = log(y/(1-y),base = exp(1))
# pd
y
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = log(y/(1-y),base = exp(1))
# pd
y = assign(y, envir = .global)
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = log(y/(1-y),base = exp(1))
# pd
y1 = assign(y, envir = .global)
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = log(y/(1-y),base = exp(1))
# pd
assign(y1,x = y,envir = .GlobalEnv)
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = log(y/(1-y),base = exp(1))
# pd
assign(y,x = y1,envir = .GlobalEnv)
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = log(y/(1-y),base = exp(1))
# pd
assign('y1', y, envir = .GlobalEnv)
}
reg(x,b0,b1)
y1
exp(1)
b1*x
b0 + b1*x
y = b0 + b1*x
pd = log(y/(1-y),base = exp(1))
log(y/(1-y),base = exp(1))
y
y/(1-y)
exp(1)
pd = log(y/(1-y),base = exp(1))
pd
y = b0 + b1*x
pd = log(y/(1-y),base = exp(1))
pd = log(x = (y/(1-y)),base = exp(1))
pd
log(x = (y/(1-y)),base = exp(1))
log(x = 3,base = exp(1))
log(x = y/1-y ,base = exp(1))
log(x = (y/1-y) ,base = exp(1))
(y/1-y)
(y/(1-y))
log(x = (y/(1-y)) ,base = exp(1))
x = (y/(1-y))
(y/(1-y))
y = b0 + b1*x
y
(y/(1-y))
x = 1000
b0 = -10.6513
b1 = 0.0055
y = b0 + b1*x
y
pd = log(x = (y/(1-y)) ,base = exp(1))
(y/(1-y))
pd = exp(y)/(1+exp(y))
pd
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = exp(y)/(1+exp(y))
}
reg(x,b0,b1)
ls()
rm(list = ls())
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = exp(y)/(1+exp(y))
a = return(c(y,pd))
}
reg(x,b0,b1)
x = 1000
b0 = -10.6513
b1 = 0.0055
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = exp(y)/(1+exp(y))
a = return(c(y,pd))
}
reg(x,b0,b1)
a
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = exp(y)/(1+exp(y))
y
pd
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = exp(y)/(1+exp(y))
a = return(c(y,pd))
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = exp(y)/(1+exp(y))
a = return(c(y,pd))
assign('a',a,envir = .GlobalEnv)
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = exp(y)/(1+exp(y))
a = return(c(y,pd))
assign('a',a,envir = .GlobalEnv)
}
reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = exp(y)/(1+exp(y))
a = return(c(y,pd))
assign('a',a,envir = .GlobalEnv)
}
reg(x,b0,b1)
a = reg(x,b0,b1)
a
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = exp(y)/(1+exp(y))
# return(c(y,pd))
}
a = reg(x,b0,b1)
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = exp(y)/(1+exp(y))
return(c(y,pd))
}
a = reg(x,b0,b1)
a[,2]
a[2]
a[1]
x = 2000
b0 = -10.6513
b1 = 0.0055
reg <- function(x,b0,b1) {
y = b0 + b1*x
pd = exp(y)/(1+exp(y))
return(c(y,pd))
}
b = reg(x,b0,b1)
# install.packages("dplyr")
# install.packages("readxl")
getwd()
setwd('C:/Users/redhw/OneDrive/Documents/GitHub/Python-Code-Testing/Credit Risk Modelling')
data = readxl::read_excel('candy-data.xlsx')
# model = LinearRegression().fit(candy['chocolate'].values.reshape(-1,1), candy['winpercent'])
model = lm(winpercent ~ chocolate -1,data = data)
summary(model)
# a
# install.packages("dplyr")
# install.packages("readxl")
getwd()
setwd('C:/Users/redhw/OneDrive/Documents/GitHub/Python-Code-Testing/Credit Risk Modelling')
data = readxl::read_excel('candy-data.xlsx')
# model = LinearRegression().fit(candy['chocolate'].values.reshape(-1,1), candy['winpercent'])
model = lm(winpercent ~ chocolate + fruity -1,data = data)
summary(model)
# a
